# user  root;

env LUA_API_URL;
env S3_BUCKET_URL;

worker_processes  1;
error_log /var/log/nginx_debug.log debug;
error_log  /var/log/nginx_error.log warn;
pid        /var/run/nginx.pid;
events {
  worker_connections  1024;
}
http {
  include       mime.types;
  default_type  application/octet-stream;
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log  /var/log/nginx_access.log  main;
  sendfile        on;
  keepalive_timeout  65;
  server {
    listen       80;
    server_name  localhost;
    location / {
      root   /app;
      index  index.html;
      try_files $uri $uri/ /index.html;
    }
    location ~ /public/(.+) {
      root   /app;
      resolver 8.8.8.8;
      proxy_http_version     1.1;
      proxy_redirect         off;
      proxy_set_header       Connection "";
      proxy_set_header       Authorization '';
      proxy_set_header       X-Real-IP $remote_addr;
      proxy_set_header       X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_hide_header      x-amz-id-2;
      proxy_hide_header      x-amz-request-id;
      proxy_hide_header      x-amz-meta-server-side-encryption;
      proxy_hide_header      x-amz-server-side-encryption;
      proxy_hide_header      Set-Cookie;
      proxy_ignore_headers   Set-Cookie;
      proxy_intercept_errors on;
      add_header             Cache-Control max-age=31536000;
      set $final_proxy_url "";
      access_by_lua_block {
        local success, pcallErr = pcall(
          function() 
            local proxy_address = os.getenv("S3_BUCKET_URL")
            local uri = ngx.var.request_uri
            ngx.var.final_proxy_url = proxy_address .. uri
          end
        )
        if not success then
          ngx.log(ngx.ERR, pcallErr)
        end
      }
      proxy_pass             $final_proxy_url;
    }
    location ~ /share/([0-9a-z]+) {
      root /app;
      index index.html;
      try_files /index.html /index.html;
      set $og_title "Shared model";
      set $og_thumbnail "https://lens.ondsel.com/ondsel_logo.svg";
      access_by_lua_block {
        local success, pcallErr = pcall(
          function() 
            local http = require("resty.http")
            local cjson = require("cjson")
            local httpc = http.new()
            local id = ngx.var.request_uri
            local api = os.getenv("LUA_API_URL")

            local lastSlashIndex = string.find(id, "/[^/]*$")
            local shareModelId = string.sub(id, lastSlashIndex + 1)

            local res, err = httpc:request_uri(api .. "/shared-models/" .. shareModelId, {
                method = "GET"
            })
            if not res then
              error("Failed to request API: " .. err)
            elseif res.status ~= 200 then
              error("API returned non-200 status code: " .. res.status)
            else
                local data = cjson.decode(res.body)
                ngx.var.og_title = data.model.file.custFileName
                lastSlashIndex = string.find(data.thumbnailUrl, "/public/[^/]*$")
                local s3uri = string.sub(data.thumbnailUrl, lastSlashIndex + 1)
                ngx.var.og_thumbnail = ngx.var.scheme .. "://" .. ngx.var.host .. "/" .. s3uri
            end
          end
        )
        if not success then
          ngx.log(ngx.ERR, pcallErr)
        end
      }
      set $og_url $http_host$request_uri;
      set $og_host $http_host;
      add_header 'X-Frame-Options' 'SAMEORIGIN' always;
      sub_filter '</head>' '
  <!-- OpenGraph protocol Meta tags -->
  <meta property="og:title" content="$og_title" />
  <meta property="og:description" content="3D Mesh Model" />
  <meta property="og:image" content="$og_thumbnail" />
  <meta property="og:image:secure_url" content="$og_thumbnail" />
  <meta property="og:image:type" content="image/png" />
  <meta property="og:image:width" content="400" />
  <meta property="og:image:height" content="300" />
  <meta property="og:image:alt" content="$og_title" />

  <!-- Twitter Meta tags -->
  <meta name="twitter:card" content="summary_large_image">
  <meta property="twitter:domain" content="$og_host">
  <meta property="twitter:url" content="$og_url">
  <meta name="twitter:title" content="$og_title">
  <meta name="twitter:description" content="3D Mesh Model">
  <meta name="twitter:image" content="$og_thumbnail">
</head>';
      sub_filter_once off;
    }
   error_page   500 502 503 504  /50x.html;
   location = /50x.html {
     root   /usr/local/openresty/nginx/html;
   }
  }
}
